ddsHTSeq
treatments
ddsHTSeq
ddsHTSeq
dds
res
summary(res)
# filter results by p value
res= subset(res, padj<0.05)
res
# order results by padj value (most significant to least)
res <- res[order(res$padj),]
res
resdata
head(resdata)
names(resdata)[1] <- 'gene'
write.csv(resdata, file = paste0(outputPrefix, "-results-with-normalized.csv"))
# send normalized counts to tab delimited file for GSEA, etc.
write.table(as.data.frame(counts(dds),normalized=T),
file = paste0(outputPrefix, "_normalized_counts.txt"), sep = '\t')
# produce DataFrame of results of statistical tests
mcols(res, use.names = T)
write.csv(as.data.frame(mcols(res, use.name = T)),
file = paste0(outputPrefix, "-test-conditions.csv"))
ddsClean <- replaceOutliersWithTrimmedMean(dds)
ddsClean
ddsClean <- DESeq(ddsClean)
ddsClean
temp_ddsClean <- ddsClean
temp_ddsClean
tab <- table(initial = results(dds)$padj < 0.05,
cleaned = results(ddsClean)$padj < 0.05)
tab
addmargins(tab)
write.csv(as.data.frame(tab),file = paste0(outputPrefix, "-replaceoutliers.csv"))
resClean <- results(ddsClean)
resClean
resClean
resClean = subset(res, padj<0.05)
resClean
resClean
# MA plot of RNAseq data for entire dataset
# http://en.wikipedia.org/wiki/MA_plot
# genes with padj < 0.1 are colored Red
plotMA(dds, ylim=c(-8,8),main = "RNAseq experiment")
dev.copy(png, paste0(outputPrefix, "-MAplot_initial_analysis.png"))
dev.off()
# transform raw counts into normalized values
# DESeq2 has two options:  1) rlog transformed and 2) variance stabilization
# variance stabilization is very good for heatmaps, etc.
rld <- rlogTransformation(dds, blind=T)
rld
vsd <- varianceStabilizingTransformation(dds, blind=T)
vsd
# clustering analysis
# excerpts from http://dwheelerau.com/2014/02/17/how-to-use-deseq2-to-analyse-rnaseq-data/
library("RColorBrewer")
library("gplots")
sampleDists <- dist(t(assay(rld)))
sampleDists
suppressMessages(library("RColorBrewer"))
sampleDistMatrix <- as.matrix(sampleDists)
sampleDistMatrix
rownames(sampleDistMatrix) <- paste(colnames(rld), rld$type, sep="")
colnames(sampleDistMatrix) <- paste(colnames(rld), rld$type, sep="")
colors <- colorRampPalette( rev(brewer.pal(8, "Blues")) )(255)
colors
rownames(sampleDistMatrix)
colnames(sampleDistMatrix)
colors <- colorRampPalette( rev(brewer.pal(8, "Blues")) )(255)
heatmap(sampleDistMatrix,col=colors,margin = c(8,8))
dev.copy(png,paste0(outputPrefix, "-clustering.png"))
dev.off()
#Principal components plot shows additional but rough clustering of samples
library("genefilter")
library("ggplot2")
library("grDevices")
rv <- rowVars(assay(rld))
rv
head(rv)
select <- order(rv, decreasing=T)[seq_len(min(500,length(rv)))]
select
head (select)
pc <- prcomp(t(assay(vsd)[select,]))
head(pc)
# set condition
condition <- treatments
condition
scores <- data.frame(pc$x, condition)
scores
(pcaplot <- ggplot(scores, aes(x = PC1, y = PC2, col = (factor(condition))))
+ geom_point(size = 5)
+ ggtitle("Principal Components")
+ scale_colour_brewer(name = " ", palette = "Set1")
+ theme(
plot.title = element_text(face = 'bold'),
legend.position = c(.9,.2),
legend.key = element_rect(fill = 'NA'),
legend.text = element_text(size = 10, face = "bold"),
axis.text.y = element_text(colour = "Black"),
axis.text.x = element_text(colour = "Black"),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = 'bold'),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.background = element_rect(color = 'black',fill = NA)
))
#dev.copy(png,paste0(outputPrefix, "-PCA.png"))
ggsave(pcaplot,file=paste0(outputPrefix, "-ggplot2.png"))
# heatmap of data
library("RColorBrewer")
library("gplots")
# 1000 top expressed genes with heatmap.2
select <- order(rowMeans(counts(ddsClean,normalized=T)),decreasing=T)[1:100]
select
my_palette <- colorRampPalette(c("blue",'white','red'))(n=100)
my_palette
heatmap.2(assay(vsd)[select,], col=my_palette,
scale="row", key=T, keysize=1, symkey=T,
density.info="none", trace="none",
cexCol=0.6, labRow=F,
main="Heatmap of 100 DE Genes in Liver Tissue Comparison")
dev.copy(png, paste0(outputPrefix, "-HEATMAP.png"))
dev.off()
# Load DESeq2 library
library("DESeq2")
# Set the working directory
directory <- "~/Desktop/Curso_transcriptomic/"
setwd(directory)
list.files(directory)
# Set the prefix for each output file name
outputPrefix <- "Croaker_DESeq2"
sampleFiles<- c("LB2A_SRR1964642.counts","LB2A_SRR1964643.counts",
"LC2A_SRR1964644.counts", "LC2A_SRR1964645.counts")
sampleFiles
# Liver mRNA profiles of control group: (LB2A)
# Liver mRNA profiles of thermal stress group: (LC2A)
# ""CONTROL"" LB2A_1: LB2A_SRR1964642.counts, LB2A_2: LB2A_SRR1964643.counts
# ""TREATED"" LC2A_1: LB2A_SRR1964644.counts, LC2A_2: LC2A_SRR1964645.counts
sampleNames <- c("LB2A_1","LB2A_2","LC2A_1","LC2A_2")
sampleNames
sampleCondition <- c("control","control","treated","treated")
sampleCondition
sampleTable <- data.frame(sampleName = sampleNames,
fileName = sampleFiles,
condition = sampleCondition)
sampleTable
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = directory,
design = ~ condition)
ddsHTSeq
#By default, R will choose a reference level for factors based on alphabetical order.
# To chose the reference we can use: factor()
treatments <- c("control","treated")
treatments
ddsHTSeq$condition
ddsHTSeq
#Setting the factor levels
colData(ddsHTSeq)$condition <- factor(colData(ddsHTSeq)$condition,
levels = treatments)
ddsHTSeq$condition
# Differential expression analysis
#differential expression analysis steps are wrapped into a single function, DESeq()
dds <- DESeq(ddsHTSeq)
dds
# restuls talbe will be generated using results() which will include:
#  log2 fold changes, p values and adjusted p values
res <- results(dds)
res
summary(res)
# filter results by p value
res= subset(res, padj<0.05)
# order results by padj value (most significant to least)
res <- res[order(res$padj),]
res
# save data results and normalized reads to csv
resdata <- merge(as.data.frame(res),
as.data.frame(counts(dds,normalized =TRUE)),
by = 'row.names', sort = FALSE)
head(resdata)
names(resdata)[1] <- 'gene'
write.csv(resdata, file = paste0(outputPrefix, "-results-with-normalized.csv"))
# send normalized counts to tab delimited file for GSEA, etc.
write.table(as.data.frame(counts(dds),normalized=T),
file = paste0(outputPrefix, "_normalized_counts.txt"), sep = '\t')
# produce DataFrame of results of statistical tests
mcols(res, use.names = T)
write.csv(as.data.frame(mcols(res, use.name = T)),
file = paste0(outputPrefix, "-test-conditions.csv"))
ddsClean <- replaceOutliersWithTrimmedMean(dds)
ddsClean
ddsClean <- DESeq(ddsClean)
ddsClean
temp_ddsClean <- ddsClean
temp_ddsClean
tab <- table(initial = results(dds)$padj < 0.05,
cleaned = results(ddsClean)$padj < 0.05)
tab
addmargins(tab)
write.csv(as.data.frame(tab),file = paste0(outputPrefix, "-replaceoutliers.csv"))
resClean <- results(ddsClean)
resClean
resClean = subset(res, padj<0.05)
resClean
resClean <- resClean[order(resClean$padj),]
resClean
write.csv(as.data.frame(resClean),file = paste0(outputPrefix, "-replaceoutliers-results.csv"))
# MA plot of RNAseq data for entire dataset
# http://en.wikipedia.org/wiki/MA_plot
# genes with padj < 0.1 are colored Red
plotMA(dds, ylim=c(-8,8),main = "RNAseq experiment")
dev.copy(png, paste0(outputPrefix, "-MAplot_initial_analysis.png"))
dev.off()
# transform raw counts into normalized values
# DESeq2 has two options:  1) rlog transformed and 2) variance stabilization
# variance stabilization is very good for heatmaps, etc.
rld <- rlogTransformation(dds, blind=T)
rld
vsd <- varianceStabilizingTransformation(dds, blind=T)
vsd
# save normalized values
write.table(as.data.frame(assay(rld),file = paste0(outputPrefix, "-rlog-transformed-counts.txt"), sep = '\t'))
write.table(as.data.frame(assay(vsd),file = paste0(outputPrefix, "-vst-transformed-counts.txt"), sep = '\t'))
# clustering analysis
# excerpts from http://dwheelerau.com/2014/02/17/how-to-use-deseq2-to-analyse-rnaseq-data/
library("RColorBrewer")
library("gplots")
sampleDists <- dist(t(assay(rld)))
sampleDists
suppressMessages(library("RColorBrewer"))
sampleDistMatrix <- as.matrix(sampleDists)
sampleDistMatrix
rownames(sampleDistMatrix) <- paste(colnames(rld), rld$type, sep="")
rownames(sampleDistMatrix)
colnames(sampleDistMatrix) <- paste(colnames(rld), rld$type, sep="")
colnames(sampleDistMatrix)
colors <- colorRampPalette( rev(brewer.pal(8, "Blues")) )(255)
heatmap(sampleDistMatrix,col=colors,margin = c(8,8))
dev.copy(png,paste0(outputPrefix, "-clustering.png"))
dev.off()
#Principal components plot shows additional but rough clustering of samples
library("genefilter")
library("ggplot2")
library("grDevices")
rv <- rowVars(assay(rld))
head(rv)
select <- order(rv, decreasing=T)[seq_len(min(500,length(rv)))]
head (select)
pc <- prcomp(t(assay(vsd)[select,]))
# set condition
condition <- treatments
condition
scores <- data.frame(pc$x, condition)
scores
(pcaplot <- ggplot(scores, aes(x = PC1, y = PC2, col = (factor(condition))))
+ geom_point(size = 5)
+ ggtitle("Principal Components")
+ scale_colour_brewer(name = " ", palette = "Set1")
+ theme(
plot.title = element_text(face = 'bold'),
legend.position = c(.9,.2),
legend.key = element_rect(fill = 'NA'),
legend.text = element_text(size = 10, face = "bold"),
axis.text.y = element_text(colour = "Black"),
axis.text.x = element_text(colour = "Black"),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = 'bold'),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.background = element_rect(color = 'black',fill = NA)
))
#dev.copy(png,paste0(outputPrefix, "-PCA.png"))
ggsave(pcaplot,file=paste0(outputPrefix, "-ggplot2.png"))
# heatmap of data
library("RColorBrewer")
library("gplots")
# 1000 top expressed genes with heatmap.2
select <- order(rowMeans(counts(ddsClean,normalized=T)),decreasing=T)[1:100]
select
my_palette <- colorRampPalette(c("blue",'white','red'))(n=100)
heatmap.2(assay(vsd)[select,], col=my_palette,
scale="row", key=T, keysize=1, symkey=T,
density.info="none", trace="none",
cexCol=0.6, labRow=F,
main="Heatmap of 100 DE Genes in Liver Tissue Comparison")
dev.copy(png, paste0(outputPrefix, "-HEATMAP.png"))
dev.off()
# Load DESeq2 library
library("DESeq2")
# Set the working directory
directory <- "~/Desktop/Curso_transcriptomic/"
setwd(directory)
list.files(directory)
# Set the prefix for each output file name
outputPrefix <- "Croaker_DESeq2"
sampleFiles<- c("LB2A_SRR1964642.counts","LB2A_SRR1964643.counts",
"LC2A_SRR1964644.counts", "LC2A_SRR1964645.counts")
sampleFiles
# Liver mRNA profiles of control group: (LB2A)
# Liver mRNA profiles of thermal stress group: (LC2A)
# ""CONTROL"" LB2A_1: LB2A_SRR1964642.counts, LB2A_2: LB2A_SRR1964643.counts
# ""TREATED"" LC2A_1: LB2A_SRR1964644.counts, LC2A_2: LC2A_SRR1964645.counts
sampleNames <- c("LB2A_1","LB2A_2","LC2A_1","LC2A_2")
sampleNames
sampleCondition <- c("control","control","treated","treated")
sampleCondition
sampleTable <- data.frame(sampleName = sampleNames,
fileName = sampleFiles,
condition = sampleCondition)
sampleTable
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = directory,
design = ~ condition)
ddsHTSeq
# Load DESeq2 library
library("DESeq2")
# Set the working directory
directory <- "~/Documents/GitHub/Abies_religiosa_vs_ozone/3.-TRANSCRIPTOMICS"
setwd(directory)
list.files(directory)
# Set the prefix for each output file name
outputPrefix <- "Abies_DESeq2"
alldata<-read.delim("../../metadata/all_genes/allreadsgenes.txt")
alldata<-read.delim("../../metadata/all_genes/allreadsgenes.txt")
alldata<-read.delim("metadata/all_genes/allreadsgenes.txt")
# Set the working directory
directory <- "~/Documents/GitHub/Abies_religiosa_vs_ozone/3.-TRANSCRIPTOMICS"
setwd(directory)
list.files(directory)
# Set the prefix for each output file name
outputPrefix <- "Abies_DESeq2"
alldata<-read.delim("metadata/all_genes/allreadsgenes.txt")
alldata
DC01_15<-read.delim("metadata/genes_order/DC01_15_sw10L50.genesorder.txt", header= FALSE)
DC02_15<-read.delim("metadata/genes_order/DC02_15_sw10L50.genesorder.txt", header= FALSE)
DC03_15<-read.delim("metadata/genes_order/DC03_15_sw10L50.genesorder.txt", header= FALSE)
DC04_15<-read.delim("metadata/genes_order/DC04_15_sw10L50.genesorder.txt", header= FALSE)
DC05_15<-read.delim("metadata/genes_order/DC05_15_sw10L50.genesorder.txt", header= FALSE)
HC01_15<-read.delim("metadata/genes_order/SC01_15_sw10L50.genesorder.txt", header= FALSE)
HC02_15<-read.delim("metadata/genes_order/SC02_15_sw10L50.genesorder.txt", header= FALSE)
HC03_15<-read.delim("metadata/genes_order/SC03_15_sw10L50.genesorder.txt", header= FALSE)
HC04_15<-read.delim("metadata/genes_order/SC04_15_sw10L50.genesorder.txt", header= FALSE)
HC05_15<-read.delim("metadata/genes_order/SC05_15_sw10L50.genesorder.txt", header= FALSE)
DC01_15<-data.frame(DC01_15$V2, DC01_15$V1)
DC01_15
DC01_15<-data.frame(DC01_15$V2, DC01_15$V1)
write.table(DC01_15, "metadata/count_genes_Deseq2/DC01_15.txt", sep="\t", row.names=T)
DC01_15
DC01_15<-read.delim("metadata/genes_order/DC01_15_sw10L50.genesorder.txt", header= FALSE)
DC01_15
DC01_15<-data.frame(DC01_15$V2, DC01_15$V1)
DC01_15
write.table(DC01_15, "metadata/count_genes_Deseq2/DC01_15.txt", sep="\t", row.names=T)
DC01_15<-read.delim("metadata/genes_order/DC01_15_sw10L50.genesorder.txt", header= FALSE)
DC01_15<-data.frame(DC01_15$V2, DC01_15$V1)
View(DC01_15)
write.table(DC01_15, "metadata/count_genes_Deseq2/DC01_15.txt", sep="\t", row.names=T)
write.table(DC01_15, "metadata/count_genes_Deseq2/DC01_15.txt", sep="\t", row.names=F)
DC01_15
DC01_15<-data.frame(DC01_15$V2, DC01_15$V1)
DC02_15<-data.frame(DC02_15$V2, DC02_15$V1)
DC03_15<-data.frame(DC03_15$V2, DC03_15$V1)
DC04_15<-data.frame(DC04_15$V2, DC04_15$V1)
DC05_15<-data.frame(DC05_15$V2, DC05_15$V1)
HC01_15<-data.frame(HC01_15$V2, HC01_15$V1)
HC02_15<-data.frame(HC02_15$V2, HC02_15$V1)
HC03_15<-data.frame(HC03_15$V2, HC03_15$V1)
HC04_15<-data.frame(HC04_15$V2, HC04_15$V1)
HC05_15<-data.frame(HC05_15$V2, HC05_15$V1)
directory <- "~/Documents/GitHub/Abies_religiosa_vs_ozone/3.-TRANSCRIPTOMICS"
setwd(directory)
list.files(directory)
# Set the prefix for each output file name
outputPrefix <- "Abies_DESeq2"
alldata<-read.delim("metadata/all_genes/allreadsgenes.txt")
sampleFiles<- c("DC01_15","DC02_15","DC03_15","DC04_15","DC05_15",
"HC01_15", "HC02_15","HC03_15","HC04_15","HC05_15",)
sampleFiles<- c("DC01_15","DC02_15","DC03_15","DC04_15","DC05_15",
"HC01_15", "HC02_15","HC03_15","HC04_15","HC05_15")
# Healthy mRNA profiles of control group: (HC)
# Damaged mRNA profiles of stress group: (DC)
# ""CONTROL"" LB2A_1: LB2A_SRR1964642.counts, LB2A_2: LB2A_SRR1964643.counts
# ""TREATED"" LC2A_1: LB2A_SRR1964644.counts, LC2A_2: LC2A_SRR1964645.counts
sampleNames <- c("DC_1", "DC_2", "DC_3",  "DC_4", "DC_5",
"HC_1", "HC_2", "HC_3", "HC_4", "HC_5")
sampleCondition <- c("DC","DC","DC","DC","DC",
"HC","HC","HC","HC","HC")
sampleTable <- data.frame(sampleName = sampleNames,
fileName = sampleFiles,
condition = sampleCondition)
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = directory,
design = ~ condition)
write.table(DC05_15, "DC05_15.txt", sep="\t", row.names=F, col.names = F,)
DC01_15
DC02_15
View(HC01_15)
write.table(DC05_15, "DC05_15.txt", sep="\t", row.names=T, col.names = T,)
write.table(DC05_15, "DC05_15.txt", sep="\t", row.names=T, col.names = T,)
write.table(DC05_15, "DC05_15.txt", sep="\t", row.names=T, col.names = NA,)
write.table(DC05_15, "DC05_15.txt", sep="\t", row.names=NA, col.names = NA,)
write.table(DC05_15, "DC05_15.txt", sep="\t", row.names=F, col.names = NA,)
write.table(DC05_15, "DC05_15.txt", sep="\t", row.names=F, col.names = NA)
write.table(DC05_15, "DC05_15.txt", sep="\t", row.names=F, col.names = F)
# Set the working directory
directory <- "~/Documents/GitHub/Abies_religiosa_vs_ozone/3.-TRANSCRIPTOMICS"
setwd(directory)
list.files(directory)
# Set the working directory
directory <- "~/Documents/GitHub/Abies_religiosa_vs_ozone/3.-TRANSCRIPTOMICS/metadata/count_genes_Deseq2/"
setwd(directory)
list.files(directory)
# Set the prefix for each output file name
outputPrefix <- "Abies_DESeq2"
DC01_15<-read.delim("metadata/genes_order/DC01_15_sw10L50.genesorder.txt", header= FALSE)
DC02_15<-read.delim("metadata/genes_order/DC02_15_sw10L50.genesorder.txt", header= FALSE)
DC03_15<-read.delim("metadata/genes_order/DC03_15_sw10L50.genesorder.txt", header= FALSE)
DC04_15<-read.delim("metadata/genes_order/DC04_15_sw10L50.genesorder.txt", header= FALSE)
DC01_15<-read.delim("../genes_order/DC01_15_sw10L50.genesorder.txt", header= FALSE)
DC02_15<-read.delim("../genes_order/DC02_15_sw10L50.genesorder.txt", header= FALSE)
DC03_15<-read.delim("../genes_order/DC03_15_sw10L50.genesorder.txt", header= FALSE)
DC04_15<-read.delim("../genes_order/DC04_15_sw10L50.genesorder.txt", header= FALSE)
DC05_15<-read.delim("../genes_order/DC05_15_sw10L50.genesorder.txt", header= FALSE)
HC01_15<-read.delim("../genes_order/SC01_15_sw10L50.genesorder.txt", header= FALSE)
HC02_15<-read.delim("../genes_order/SC02_15_sw10L50.genesorder.txt", header= FALSE)
HC03_15<-read.delim("../genes_order/SC03_15_sw10L50.genesorder.txt", header= FALSE)
HC04_15<-read.delim("../genes_order/SC04_15_sw10L50.genesorder.txt", header= FALSE)
HC05_15<-read.delim("../genes_order/SC05_15_sw10L50.genesorder.txt", header= FALSE)
DC01_15<-data.frame(DC01_15$V2, DC01_15$V1)
write.table(DC01_15, "DC01_15.txt", sep="\t", row.names=F, col.names = F)
DC02_15<-data.frame(DC02_15$V2, DC02_15$V1)
write.table(DC02_15, "DC02_15.txt", sep="\t", row.names=F, col.names = F)
DC03_15<-data.frame(DC03_15$V2, DC03_15$V1)
write.table(DC03_15, "DC03_15.txt", sep="\t", row.names=F, col.names = F)
DC04_15<-data.frame(DC04_15$V2, DC04_15$V1)
write.table(DC04_15, "DC04_15.txt", sep="\t", row.names=F, col.names = F)
DC05_15<-data.frame(DC05_15$V2, DC05_15$V1)
write.table(DC05_15, "DC05_15.txt", sep="\t", row.names=F, col.names = F)
HC01_15<-data.frame(HC01_15$V2, HC01_15$V1)
write.table(HC01_15, "HC01_15.txt", sep="\t", row.names=F, col.names = F)
HC02_15<-data.frame(HC02_15$V2, HC02_15$V1)
write.table(HC02_15, "HC02_15.txt", sep="\t", row.names=F, col.names = F)
HC03_15<-data.frame(HC03_15$V2, HC03_15$V1)
write.table(HC03_15, "HC03_15.txt", sep="\t", row.names=F, col.names = F)
HC04_15<-data.frame(HC04_15$V2, HC04_15$V1)
write.table(HC04_15, "HC04_15.txt", sep="\t", row.names=F, col.names = F)
HC05_15<-data.frame(HC05_15$V2, HC05_15$V1)
write.table(HC05_15, "HC05_15.txt", sep="\t", row.names=F, col.names = F)
sampleFiles<- c("DC01_15","DC02_15","DC03_15","DC04_15","DC05_15",
"HC01_15", "HC02_15","HC03_15","HC04_15","HC05_15")
# Healthy mRNA profiles of control group: (HC)
# Damaged mRNA profiles of stress group: (DC)
# ""CONTROL"" LB2A_1: LB2A_SRR1964642.counts, LB2A_2: LB2A_SRR1964643.counts
# ""TREATED"" LC2A_1: LB2A_SRR1964644.counts, LC2A_2: LC2A_SRR1964645.counts
sampleNames <- c("DC_1", "DC_2", "DC_3",  "DC_4", "DC_5",
"HC_1", "HC_2", "HC_3", "HC_4", "HC_5")
sampleFiles<- c("DC01_15.txt","DC02_15.txt","DC03_15.txt","DC04_15.txt","DC05_15.txt",
"HC01_15.txt", "HC02_15.txt","HC03_15.txt","HC04_15.txt","HC05_15.txt")
# Healthy mRNA profiles of control group: (HC)
# Damaged mRNA profiles of stress group: (DC)
# ""CONTROL"" LB2A_1: LB2A_SRR1964642.counts, LB2A_2: LB2A_SRR1964643.counts
# ""TREATED"" LC2A_1: LB2A_SRR1964644.counts, LC2A_2: LC2A_SRR1964645.counts
sampleNames <- c("DC_1", "DC_2", "DC_3",  "DC_4", "DC_5",
"HC_1", "HC_2", "HC_3", "HC_4", "HC_5")
sampleCondition <- c("DC","DC","DC","DC","DC",
"HC","HC","HC","HC","HC")
sampleTable <- data.frame(sampleName = sampleNames,
fileName = sampleFiles,
condition = sampleCondition)
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = directory,
design = ~ condition)
sampleFiles<- c("DC01_15.txt","DC02_15.txt","DC03_15.txt","DC04_15.txt","DC05_15.txt",
"HC01_15.txt", "HC02_15.txt","HC03_15.txt","HC04_15.txt","HC05_15.txt")
# Healthy mRNA profiles of control group: (HC)
# Damaged mRNA profiles of stress group: (DC)
# ""CONTROL"" LB2A_1: LB2A_SRR1964642.counts, LB2A_2: LB2A_SRR1964643.counts
# ""TREATED"" LC2A_1: LB2A_SRR1964644.counts, LC2A_2: LC2A_SRR1964645.counts
sampleNames <- c("DC_1", "DC_2", "DC_3",  "DC_4", "DC_5",
"HC_1", "HC_2", "HC_3", "HC_4", "HC_5")
sampleCondition <- c("DC","DC","DC","DC","DC",
"HC","HC","HC","HC","HC")
sampleTable <- data.frame(sampleName = sampleNames,
fileName = sampleFiles,
condition = sampleCondition)
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = directory,
design = ~ condition)
sampleTable
directory
design
alldata<-read.delim("../../metadata/all_genes/allreadsgenes.txt")
alldata <- as.data.frame(alldata)
head (alldata)
# Convert dataframe to data matrix
x<-alldata
rownames(x)<-alldata[,1]
x<-x[ ,2:ncol(x)]
alldata<-as.matrix(x)
# Select subset data(descart data)
DCvsHC<- subset(alldata, select = -c(DS_1, DS_2, DS_4,
HS_1, HS_2, HS_5,
HC17, DC47))
table(rowSums(DCvsHC)==0)
suma <- rowSums(DCvsHC)
filtconteos <- DCvsHC[suma != 0,]
dim(filtconteos)
head(filtconteos)
