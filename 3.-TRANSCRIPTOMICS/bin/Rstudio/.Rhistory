table(rowSums(alldata)==0)
suma <- rowSums(alldata)
filtconteos <- alldata[suma != 0,]
dim(filtconteos)
## Clase DGEList
d <- DGEList(counts = filtconteos[,1:10], group = targets$tratamiento) ## Normalization
colnames(d) <- targets$label
## Normalization
d <- calcNormFactors(d)
plotMDS(d, main="plotMDS DCvsHC")
## Dispersors stimation
d <- estimateCommonDisp(d,verbose=TRUE)
d <- estimateTagwiseDisp(d)
plotBCV(d, main="plotBCV DCvsHC")
## Test
et <- exactTest(d,pair=c("HC","DC"))
top<- topTags(et, n= Inf)
hist(top$table$FDR, breaks = 100, main = "Hist FDR DCvsHC")
abline(v=0.05, col="red",lwd=3)
### Class DESeqDataSet
dds <- DESeqDataSetFromMatrix(countData=filtconteos, colData= targets, design=~tratamiento)
### Test
dds <- DESeq(dds)
res <- results(dds)
#edgeR
d$samples$norm.factors #edgeR
#DESeq2
sizeFactors(dds) #DESeq2
# First calculated comun disspersion
d$common.dispersion
# Second gen to gen dispersion of comun dispersion
head(d$tagwise.dispersion)
# First calculated stimation gen to gen
head(mcols(dds)$dispGeneEs)
# Then through an adjustment with the average counts estimate the dispersion
head(mcols(dds)$dispersion)
############################################################################################################
#Compare the tests, that is, the p-values and other results that each packet has calculated for each gene
############################################################################################################
########
# edgeR
########
topTags(et, n= Inf)
########
# DESeq2
########
res[rownames(topTags(et, n= Inf)),]
################################
#Plot Log fold change
################################
########
# edgeR
########
de <- decideTestsDGE(et, p.value=0.1)
detags <- rownames(d)[as.logical(de)]
plotSmear(et, de.tags=detags, main="plotSmear de edgeR") > abline(h=0, col="red", lwd=3)
########
# DESeq2
plotMA(res, main="MA-plot DESeq2", ylim=c(-5,5))
##################################################################
### Sort the genes according to the attached p-value they have obtained
##################################################################
########
# edgeR
########
topSig <- top[top$table$FDR < 0.1, ]
dim(topSig)
genesDEedgeR <- rownames(topSig)
genesDEedgeR
topSig_export<-topSig
topSig_export$ID<-genesDEedgeR
write.table(topSig_export, "../../metadata/DGE/EdgeR_HvsD170ppb_FDR_0.1.txt", sep="\t", row.names=FALSE)
topSig <- top[top$table$FDR < 0.1, ]
topSig <- topSig[topSig$table$PValue < 0.05, ]
dim(topSig)
genesDEedgeR <- rownames(topSig)
genesDEedgeR
topSig_export<-topSig
topSig_export$ID<-genesDEedgeR
write.table(topSig_export, "../../metadata/DGE/EdgeR_HvsD170ppb_FDR_0.1_PValue_0.05.txt", sep="\t", row.names=FALSE)
topSig <- top[top$table$FDR < 0.05, ]
topSig <- topSig[topSig$table$PValue < 0.05, ]
dim(topSig)
genesDEedgeR <- rownames(topSig)
genesDEedgeR
topSig_export<-topSig
topSig_export$ID<-genesDEedgeR
write.table(topSig_export, "../../metadata/DGE/EdgeR_HvsD170ppb_FDR_0.0.05_PValue_0.05.txt", sep="\t", row.names=FALSE)
topSig <- topSig[topSig$table$PValue < 0.01, ]
dim(topSig)
genesDEedgeR <- rownames(topSig)
genesDEedgeR
topSig_export<-topSig
topSig_export$ID<-genesDEedgeR
write.table(topSig_export, "../../metadata/DGE/EdgeR_HvsD170ppb_FDR_0.0.05_PValue_0.05.txt", sep="\t", row.names=FALSE)
########
# DESeq2
########
# Sort by p-valores
resOrdered <- res[order(res$padj),]
# Only DEG
xx <-res[order(res$padj,na.last=NA),]
resSig2 <- xx[xx$padj < 0.1, ]
resSig2
resSig2 <- xx[xx$padj < 0.1, ]
dim(resSig2)
genesDEDESeq2 <- rownames(resSig2)
genesDEDESeq2
resSig2_export<-resSig2
resSig2_export$ID<-genesDEDESeq2
write.table(resSig2_export, "../../metadata/DGE/DESeq2_HvsD170ppb_PValue_0.1.txt", sep="\t", row.names=FALSE)
resSig2 <- xx[xx$pvalue < 0.05, ]
dim(resSig2)
genesDEDESeq2 <- rownames(resSig2)
genesDEDESeq2
resSig2_export<-resSig2
resSig2_export$ID<-genesDEDESeq2
write.table(resSig2_export, "../../metadata/DGE/DESeq2_HvsD170ppb_PValue_0.05.txt", sep="\t", row.names=FALSE)
#Load data
results_DESeq2<- read.delim("../../metadata/DGE/DESeq2_HvsD170ppb_PValue_0.05.txt")
results_Edge<- read.delim("../../metadata/DGE/EdgeR_HvsD170ppb_FDR_0.1_PValue_0.05.txt")
#Indicate data to plot##
results_DESeq2$sig <- -log10(results_DESeq2$padj) ##Create a column with aditional info of FDR (padj)##
cols <- densCols(results_DESeq2$log2FoldChange, results_DESeq2$pvalue)
results_Edge$sig <- -log10(results_Edge$FDR) ##Create a column with aditional info of FDR (padj)##
cols <- densCols(results_Edge$logFC, results_Edge$PValue)
cols[results_DESeq2$log2FoldChange < -1.5] <- "#0066FF"
cols[results_DESeq2$log2FoldChange > 1.5] <- "#0033CC"
cols[results_DESeq2$pvalue == 0] <- "#000000"
cols[results_DESeq2$pvalue > 0.05] <- "#CCCCCC"
cols[results_Edge$logFC < -1.5] <- "#0066FF"
cols[results_Edge$logFC > 1.5] <- "#0033CC"
cols[results_Edge$PValue == 0] <- "#000000"
cols[results_Edge$PValue > 0.05] <- "#CCCCCC"
results_DESeq2$pch <- 19
results_DESeq2$pch[results_DESeq2$pvalue ==0] <- 6
plot(results_DESeq2$log2FoldChange,
results_DESeq2$sig,
col=cols, panel.first=grid(),
main="all RNA",
xlab="log2(fold-change)",
ylab="-log10(adjusted p-value)",
pch=results_DESeq2$pch, cex=0.8)
abline(v=0)
abline(v=c(-1,1), col="brown")
results_Edge$pch <- 19
results_Edge$pch[results_Edge$PValue ==0] <- 6
plot(results_Edge$logFC,
results_Edge$sig,
col=cols, panel.first=grid(),
main="all RNA",
xlab="log2(fold-change)",
ylab="-log10(adjusted p-value)",
pch=results_Edge$pch, cex=0.8)
abline(v=0)
abline(v=c(-1,1), col="brown")
VPSol_DESeq2 <- data.frame(results_DESeq2$log2FoldChange, results_DESeq2$sig, row.names = rownames(results_DESeq2)) ##Creates a data frame with coordinates##
VPSol_edge <- data.frame(results_Edge$logFC, results_Edge$sig, row.names = rownames(results_Edge)) ##Creates a data frame with coordinates##
colnames(VPSol_DESeq2) <- c("FoldChange", "p_value")
colnames(VPSol_edge) <- c("FoldChange", "p_value")
VPSol_DESeq2$color <- ifelse((VPSol_DESeq2$FoldChange > 1) & (VPSol_DESeq2$p_value < 0.05), "Col_1",
ifelse((VPSol_DESeq2$FoldChange < -1) & (VPSol_DESeq2$p_value < 0.05), "Col_2",
ifelse((VPSol_DESeq2$FoldChange > 1) & (VPSol$p_value > 0.05), "Col_3",
ifelse((VPSol_DESeq2$FoldChange < -1) & (VPSol_DESeq2$p_value > 0.05), "Col_4",
ifelse((VPSol_DESeq2$FoldChange < 1) & (VPSol_DESeq2$p_value > 0.05), "Col_5", "Col_6")))))
VPSol_DESeq2$color <- ifelse((VPSol_DESeq2$FoldChange > 1) & (VPSol_DESeq2$p_value < 0.05), "Col_1",
ifelse((VPSol_DESeq2$FoldChange < -1) & (VPSol_DESeq2$p_value < 0.05), "Col_2",
ifelse((VPSol_DESeq2$FoldChange > 1) & (VPSol_DESeq2$p_value > 0.05), "Col_3",
ifelse((VPSol_DESeq2$FoldChange < -1) & (VPSol_DESeq2$p_value > 0.05), "Col_4",
ifelse((VPSol_DESeq2$FoldChange < 1) & (VPSol_DESeq2$p_value > 0.05), "Col_5", "Col_6")))))
VPSol_edge$color <- ifelse((VPSol_edge$FoldChange > 1) & (VPSol_edge$p_value < 0.05), "Col_1",
ifelse((VPSol_edge$FoldChange < -1) & (VPSol_edge$p_value < 0.05), "Col_2",
ifelse((VPSol_edge$FoldChange > 1) & (VPSol_edge$p_value > 0.05), "Col_3",
ifelse((VPSol_edge$FoldChange < -1) & (VPSol_edge$p_value > 0.05), "Col_4",
ifelse((VPSol_edge$FoldChange < 1) & (VPSol_edge$p_value > 0.05), "Col_5", "Col_6")))))
##Create plot##
ggplot(VPSol_DESeq2, aes(x=FoldChange, y=p_value)) +
geom_point(aes(colour = ))
ggplot(VPSol_edge, aes(x=FoldChange, y=p_value)) +
geom_point(aes(colour = color))
##Create plot##
ggplot(VPSol_DESeq2, aes(x=FoldChange, y=p_value)) +
geom_point(aes(colour = ))
ggsave("../../outputs/VPSol_DESeq2.png")
ggplot(VPSol_edge, aes(x=FoldChange, y=p_value)) +
geom_point(aes(colour = color))
resSig2 <- xx[xx$pvalue < 0.05, ]
dim(resSig2)
genesDEDESeq2 <- rownames(resSig2)
genesDEDESeq2
resSig2 <- xx[xx]
resSig2 <- xx[xx$pvalue < 0.05, ]
dim(resSig2)
genesDEDESeq2 <- rownames(resSig2)
genesDEDESeq2
resSig2 <- xx[xx$pvalue <= 0.05, ]
dim(resSig2)
genesDEDESeq2 <- rownames(resSig2)
genesDEDESeq2
resSig2_export<-resSig2
#Load data
results_DESeq2<- read.delim("../../metadata/DGE/DESeq2_HvsD170ppb_PValue_0.05.txt")
results_Edge<- read.delim("../../metadata/DGE/EdgeR_HvsD170ppb_FDR_0.1_PValue_0.05.txt")
#Indicate data to plot##
results_DESeq2$sig <- -log10(results_DESeq2$padj) ##Create a column with aditional info of FDR (padj)##
cols <- densCols(results_DESeq2$log2FoldChange, results_DESeq2$pvalue)
results_Edge$sig <- -log10(results_Edge$FDR) ##Create a column with aditional info of FDR (padj)##
cols <- densCols(results_Edge$logFC, results_Edge$PValue)
cols[results_DESeq2$log2FoldChange < -1.5] <- "#0066FF"
cols[results_DESeq2$log2FoldChange > 1.5] <- "#0033CC"
cols[results_DESeq2$pvalue == 0] <- "#000000"
cols[results_DESeq2$pvalue > 0.05] <- "#CCCCCC"
cols[results_Edge$logFC < -1.5] <- "#0066FF"
cols[results_Edge$logFC > 1.5] <- "#0033CC"
cols[results_Edge$PValue == 0] <- "#000000"
cols[results_Edge$PValue > 0.05] <- "#CCCCCC"
results_DESeq2$pch <- 19
results_DESeq2$pch[results_DESeq2$pvalue ==0] <- 6
plot(results_DESeq2$log2FoldChange,
results_DESeq2$sig,
col=cols, panel.first=grid(),
main="all RNA",
xlab="log2(fold-change)",
ylab="-log10(adjusted p-value)",
pch=results_DESeq2$pch, cex=0.8)
abline(v=0)
abline(v=c(-1,1), col="brown")
results_Edge$pch <- 19
results_Edge$pch[results_Edge$PValue ==0] <- 6
plot(results_Edge$logFC,
results_Edge$sig,
col=cols, panel.first=grid(),
main="all RNA",
xlab="log2(fold-change)",
ylab="-log10(adjusted p-value)",
pch=results_Edge$pch, cex=0.8)
abline(v=0)
abline(v=c(-1,1), col="brown")
VPSol_DESeq2 <- data.frame(results_DESeq2$log2FoldChange, results_DESeq2$sig, row.names = rownames(results_DESeq2)) ##Creates a data frame with coordinates##
VPSol_edge <- data.frame(results_Edge$logFC, results_Edge$sig, row.names = rownames(results_Edge)) ##Creates a data frame with coordinates##
colnames(VPSol_DESeq2) <- c("FoldChange", "p_value")
colnames(VPSol_edge) <- c("FoldChange", "p_value")
VPSol_DESeq2$color <- ifelse((VPSol_DESeq2$FoldChange > 1) & (VPSol_DESeq2$p_value < 0.05), "Col_1",
ifelse((VPSol_DESeq2$FoldChange < -1) & (VPSol_DESeq2$p_value < 0.05), "Col_2",
ifelse((VPSol_DESeq2$FoldChange > 1) & (VPSol_DESeq2$p_value > 0.05), "Col_3",
ifelse((VPSol_DESeq2$FoldChange < -1) & (VPSol_DESeq2$p_value > 0.05), "Col_4",
ifelse((VPSol_DESeq2$FoldChange < 1) & (VPSol_DESeq2$p_value > 0.05), "Col_5", "Col_6")))))
VPSol_edge$color <- ifelse((VPSol_edge$FoldChange > 1) & (VPSol_edge$p_value < 0.05), "Col_1",
ifelse((VPSol_edge$FoldChange < -1) & (VPSol_edge$p_value < 0.05), "Col_2",
ifelse((VPSol_edge$FoldChange > 1) & (VPSol_edge$p_value > 0.05), "Col_3",
ifelse((VPSol_edge$FoldChange < -1) & (VPSol_edge$p_value > 0.05), "Col_4",
ifelse((VPSol_edge$FoldChange < 1) & (VPSol_edge$p_value > 0.05), "Col_5", "Col_6")))))
##Create plot##
ggplot(VPSol_DESeq2, aes(x=FoldChange, y=p_value)) +
geom_point(aes(colour = ))
ggsave("../../outputs/VPSol_DESeq2.png")
ggplot(VPSol_edge, aes(x=FoldChange, y=p_value)) +
geom_point(aes(colour = color))
#Indicate data to plot##
results_DESeq2$sig <- -log10(results_DESeq2$padj) ##Create a column with aditional info of FDR (padj)##
cols <- densCols(results_DESeq2$log2FoldChange, results_DESeq2$pvalue)
results_Edge$sig <- -log10(results_Edge$FDR) ##Create a column with aditional info of FDR (padj)##
cols <- densCols(results_Edge$logFC, results_Edge$PValue)
cols[results_DESeq2$log2FoldChange < -1.5] <- "#0066FF"
cols[results_DESeq2$log2FoldChange > 1.5] <- "#0033CC"
cols[results_DESeq2$pvalue == 0] <- "#000000"
cols[results_DESeq2$pvalue > 0.05] <- "#CCCCCC"
cols[results_Edge$logFC < -1.5] <- "#0066FF"
cols[results_Edge$logFC > 1.5] <- "#0033CC"
cols[results_Edge$PValue == 0] <- "#000000"
cols[results_Edge$PValue > 0.05] <- "#CCCCCC"
results_DESeq2$pch <- 19
results_DESeq2$pch[results_DESeq2$pvalue ==0] <- 6
plot(results_DESeq2$log2FoldChange,
results_DESeq2$sig,
col=cols, panel.first=grid(),
main="all RNA",
xlab="log2(fold-change)",
ylab="-log10(adjusted p-value)",
pch=results_DESeq2$pch, cex=0.8)
abline(v=0)
abline(v=c(-1,1), col="brown")
results_Edge$pch <- 19
results_Edge$pch[results_Edge$PValue ==0] <- 6
plot(results_Edge$logFC,
results_Edge$sig,
col=cols, panel.first=grid(),
main="all RNA",
xlab="log2(fold-change)",
ylab="-log10(adjusted p-value)",
pch=results_Edge$pch, cex=0.8)
abline(v=0)
abline(v=c(-1,1), col="brown")
VPSol_DESeq2 <- data.frame(results_DESeq2$log2FoldChange, results_DESeq2$sig, row.names = rownames(results_DESeq2)) ##Creates a data frame with coordinates##
VPSol_edge <- data.frame(results_Edge$logFC, results_Edge$sig, row.names = rownames(results_Edge)) ##Creates a data frame with coordinates##
colnames(VPSol_DESeq2) <- c("FoldChange", "p_value")
colnames(VPSol_edge) <- c("FoldChange", "p_value")
VPSol_DESeq2$color <- ifelse((VPSol_DESeq2$FoldChange > 1) & (VPSol_DESeq2$p_value < 0.05), "Col_1",
ifelse((VPSol_DESeq2$FoldChange < -1) & (VPSol_DESeq2$p_value < 0.05), "Col_2",
ifelse((VPSol_DESeq2$FoldChange > 1) & (VPSol_DESeq2$p_value > 0.05), "Col_3",
ifelse((VPSol_DESeq2$FoldChange < -1) & (VPSol_DESeq2$p_value > 0.05), "Col_4",
ifelse((VPSol_DESeq2$FoldChange < 1) & (VPSol_DESeq2$p_value > 0.05), "Col_5", "Col_6")))))
VPSol_DESeq2$color
VPSol_DESeq2
##Create plot##
ggplot(VPSol_DESeq2, aes(x=FoldChange, y=p_value)) +
geom_point(aes(colour = color ))
topSig$table$PValue
################################
#Plot Log fold change
################################
########
# edgeR
########
de <- decideTestsDGE(et, p.value=0.1)
detags <- rownames(d)[as.logical(de)]
plotSmear(et, de.tags=detags, main="plotSmear de edgeR") > abline(h=0, col="red", lwd=3)
#Load data
results_DESeq2<- read.delim("../../metadata/DGE/DESeq2_HvsD170ppb_PValue_0.05.txt")
results_Edge<- read.delim("../../metadata/DGE/EdgeR_HvsD170ppb_PValue_0.1.txt")
#Indicate data to plot##
results_DESeq2$sig <- -log10(results_DESeq2$padj) ##Create a column with aditional info of FDR (padj)##
cols <- densCols(results_DESeq2$log2FoldChange, results_DESeq2$pvalue)
results_Edge$sig <- -log10(results_Edge$FDR) ##Create a column with aditional info of FDR (padj)##
cols <- densCols(results_Edge$logFC, results_Edge$PValue)
cols[results_DESeq2$log2FoldChange < -1.5] <- "#0066FF"
cols[results_DESeq2$log2FoldChange > 1.5] <- "#0033CC"
cols[results_DESeq2$pvalue == 0] <- "#000000"
cols[results_DESeq2$pvalue > 0.05] <- "#CCCCCC"
cols[results_Edge$logFC < -1.5] <- "#0066FF"
cols[results_Edge$logFC > 1.5] <- "#0033CC"
cols[results_Edge$PValue == 0] <- "#000000"
cols[results_Edge$PValue > 0.05] <- "#CCCCCC"
results_DESeq2$pch <- 19
results_DESeq2$pch[results_DESeq2$pvalue ==0] <- 6
plot(results_DESeq2$log2FoldChange,
results_DESeq2$sig,
col=cols, panel.first=grid(),
main="all RNA",
xlab="log2(fold-change)",
ylab="-log10(adjusted p-value)",
pch=results_DESeq2$pch, cex=0.8)
abline(v=0)
abline(v=c(-1,1), col="brown")
results_Edge$pch <- 19
results_Edge$pch[results_Edge$PValue ==0] <- 6
plot(results_Edge$logFC,
results_Edge$sig,
col=cols, panel.first=grid(),
main="all RNA",
xlab="log2(fold-change)",
ylab="-log10(adjusted p-value)",
pch=results_Edge$pch, cex=0.8)
abline(v=0)
abline(v=c(-1,1), col="brown")
VPSol_DESeq2 <- data.frame(results_DESeq2$log2FoldChange, results_DESeq2$sig, row.names = rownames(results_DESeq2)) ##Creates a data frame with coordinates##
VPSol_edge <- data.frame(results_Edge$logFC, results_Edge$sig, row.names = rownames(results_Edge)) ##Creates a data frame with coordinates##
colnames(VPSol_DESeq2) <- c("FoldChange", "p_value")
colnames(VPSol_edge) <- c("FoldChange", "p_value")
VPSol_DESeq2$color <- ifelse((VPSol_DESeq2$FoldChange > 1) & (VPSol_DESeq2$p_value < 0.05), "Col_1",
ifelse((VPSol_DESeq2$FoldChange < -1) & (VPSol_DESeq2$p_value < 0.05), "Col_2",
ifelse((VPSol_DESeq2$FoldChange > 1) & (VPSol_DESeq2$p_value > 0.05), "Col_3",
ifelse((VPSol_DESeq2$FoldChange < -1) & (VPSol_DESeq2$p_value > 0.05), "Col_4",
ifelse((VPSol_DESeq2$FoldChange < 1) & (VPSol_DESeq2$p_value > 0.05), "Col_5", "Col_6")))))
VPSol_edge$color <- ifelse((VPSol_edge$FoldChange > 1) & (VPSol_edge$p_value < 0.05), "Col_1",
ifelse((VPSol_edge$FoldChange < -1) & (VPSol_edge$p_value < 0.05), "Col_2",
ifelse((VPSol_edge$FoldChange > 1) & (VPSol_edge$p_value > 0.05), "Col_3",
ifelse((VPSol_edge$FoldChange < -1) & (VPSol_edge$p_value > 0.05), "Col_4",
ifelse((VPSol_edge$FoldChange < 1) & (VPSol_edge$p_value > 0.05), "Col_5", "Col_6")))))
##Create plot##
ggplot(VPSol_DESeq2, aes(x=FoldChange, y=p_value)) +
geom_point(aes(colour = color ))
ggsave("../../outputs/VPSol_DESeq2.png")
ggplot(VPSol_edge, aes(x=FoldChange, y=p_value)) +
geom_point(aes(colour = color))
topSig <- topSig[topSig$table$PValue < 0.1, ]
dim(topSig)
genesDEedgeR <- rownames(topSig)
genesDEedgeR
topSig <- topSig[topSig$table$PValue < 1, ]
dim(topSig)
genesDEedgeR <- rownames(topSig)
genesDEedgeR
topSig$table$PValue
top$table$FDR
##################################################################
### Sort the genes according to the attached p-value they have obtained
##################################################################
########
# edgeR
########
topSig <- top[top$table$FDR < 1, ]
dim(topSig)
genesDEedgeR <- rownames(topSig)
genesDEedgeR
topSig_export<-topSig
write.table(topSig_export, "../../metadata/DGE/EdgeR_HvsD170ppb_FDR_1.txt", sep="\t", row.names=FALSE)
results_Edge<- read.delim("../../metadata/DGE/EdgeR_HvsD170ppb_FDR_1.txt")
#Indicate data to plot##
results_DESeq2$sig <- -log10(results_DESeq2$padj) ##Create a column with aditional info of FDR (padj)##
cols <- densCols(results_DESeq2$log2FoldChange, results_DESeq2$pvalue)
results_Edge$sig <- -log10(results_Edge$FDR) ##Create a column with aditional info of FDR (padj)##
cols <- densCols(results_Edge$logFC, results_Edge$PValue)
cols[results_DESeq2$log2FoldChange < -1.5] <- "#0066FF"
cols[results_DESeq2$log2FoldChange > 1.5] <- "#0033CC"
cols[results_DESeq2$pvalue == 0] <- "#000000"
cols[results_DESeq2$pvalue > 0.05] <- "#CCCCCC"
cols[results_Edge$logFC < -1.5] <- "#0066FF"
cols[results_Edge$logFC > 1.5] <- "#0033CC"
cols[results_Edge$PValue == 0] <- "#000000"
cols[results_Edge$PValue > 0.05] <- "#CCCCCC"
results_DESeq2$pch <- 19
results_DESeq2$pch[results_DESeq2$pvalue ==0] <- 6
plot(results_DESeq2$log2FoldChange,
results_DESeq2$sig,
col=cols, panel.first=grid(),
main="all RNA",
xlab="log2(fold-change)",
ylab="-log10(adjusted p-value)",
pch=results_DESeq2$pch, cex=0.8)
abline(v=0)
abline(v=c(-1,1), col="brown")
results_Edge$pch <- 19
results_Edge$pch[results_Edge$PValue ==0] <- 6
plot(results_Edge$logFC,
results_Edge$sig,
col=cols, panel.first=grid(),
main="all RNA",
xlab="log2(fold-change)",
ylab="-log10(adjusted p-value)",
pch=results_Edge$pch, cex=0.8)
abline(v=0)
abline(v=c(-1,1), col="brown")
VPSol_DESeq2 <- data.frame(results_DESeq2$log2FoldChange, results_DESeq2$sig, row.names = rownames(results_DESeq2)) ##Creates a data frame with coordinates##
VPSol_edge <- data.frame(results_Edge$logFC, results_Edge$sig, row.names = rownames(results_Edge)) ##Creates a data frame with coordinates##
colnames(VPSol_DESeq2) <- c("FoldChange", "p_value")
colnames(VPSol_edge) <- c("FoldChange", "p_value")
VPSol_DESeq2$color <- ifelse((VPSol_DESeq2$FoldChange > 1) & (VPSol_DESeq2$p_value < 0.05), "Col_1",
ifelse((VPSol_DESeq2$FoldChange < -1) & (VPSol_DESeq2$p_value < 0.05), "Col_2",
ifelse((VPSol_DESeq2$FoldChange > 1) & (VPSol_DESeq2$p_value > 0.05), "Col_3",
ifelse((VPSol_DESeq2$FoldChange < -1) & (VPSol_DESeq2$p_value > 0.05), "Col_4",
ifelse((VPSol_DESeq2$FoldChange < 1) & (VPSol_DESeq2$p_value > 0.05), "Col_5", "Col_6")))))
VPSol_edge$color <- ifelse((VPSol_edge$FoldChange > 1) & (VPSol_edge$p_value < 0.05), "Col_1",
ifelse((VPSol_edge$FoldChange < -1) & (VPSol_edge$p_value < 0.05), "Col_2",
ifelse((VPSol_edge$FoldChange > 1) & (VPSol_edge$p_value > 0.05), "Col_3",
ifelse((VPSol_edge$FoldChange < -1) & (VPSol_edge$p_value > 0.05), "Col_4",
ifelse((VPSol_edge$FoldChange < 1) & (VPSol_edge$p_value > 0.05), "Col_5", "Col_6")))))
##Create plot##
ggplot(VPSol_DESeq2, aes(x=FoldChange, y=p_value)) +
geom_point(aes(colour = color ))
ggsave("../../outputs/VPSol_DESeq2.png")
ggplot(VPSol_edge, aes(x=FoldChange, y=p_value)) +
geom_point(aes(colour = color))
(VPSol_edge$FoldChange < -1) & (VPSol_edge$p_value < 0.05)
#Load data
results_DESeq2<- read.delim("../../metadata/DGE/DESeq2_HvsD170ppb_FDR_0.1.txt")
results_Edge<- read.delim("../../metadata/DGE/EdgeR_HvsD170ppb_FDR_1.txt")
#Indicate data to plot##
results_DESeq2$sig <- -log10(results_DESeq2$padj) ##Create a column with aditional info of FDR (padj)##
cols <- densCols(results_DESeq2$log2FoldChange, results_DESeq2$pvalue)
results_Edge$sig <- -log10(results_Edge$FDR) ##Create a column with aditional info of FDR (padj)##
cols <- densCols(results_Edge$logFC, results_Edge$PValue)
cols[results_DESeq2$log2FoldChange < -1.5] <- "#0066FF"
cols[results_DESeq2$log2FoldChange > 1.5] <- "#0033CC"
cols[results_DESeq2$pvalue == 0] <- "#000000"
cols[results_DESeq2$pvalue > 0.05] <- "#CCCCCC"
cols[results_Edge$logFC < -1.5] <- "#0066FF"
cols[results_Edge$logFC > 1.5] <- "#0033CC"
cols[results_Edge$PValue == 0] <- "#000000"
cols[results_Edge$PValue > 0.05] <- "#CCCCCC"
results_DESeq2$pch <- 19
results_DESeq2$pch[results_DESeq2$pvalue ==0] <- 6
plot(results_DESeq2$log2FoldChange,
results_DESeq2$sig,
col=cols, panel.first=grid(),
main="all RNA",
xlab="log2(fold-change)",
ylab="-log10(adjusted p-value)",
pch=results_DESeq2$pch, cex=0.8)
abline(v=0)
abline(v=c(-1,1), col="brown")
results_Edge$pch <- 19
results_Edge$pch[results_Edge$PValue ==0] <- 6
plot(results_Edge$logFC,
results_Edge$sig,
col=cols, panel.first=grid(),
main="all RNA",
xlab="log2(fold-change)",
ylab="-log10(adjusted p-value)",
pch=results_Edge$pch, cex=0.8)
abline(v=0)
abline(v=c(-1,1), col="brown")
VPSol_DESeq2 <- data.frame(results_DESeq2$log2FoldChange, results_DESeq2$sig, row.names = rownames(results_DESeq2)) ##Creates a data frame with coordinates##
VPSol_edge <- data.frame(results_Edge$logFC, results_Edge$sig, row.names = rownames(results_Edge)) ##Creates a data frame with coordinates##
colnames(VPSol_DESeq2) <- c("FoldChange", "p_value")
colnames(VPSol_edge) <- c("FoldChange", "p_value")
VPSol_DESeq2$color <- ifelse((VPSol_DESeq2$FoldChange > 1) & (VPSol_DESeq2$p_value < 0.05), "Col_1",
ifelse((VPSol_DESeq2$FoldChange < -1) & (VPSol_DESeq2$p_value < 0.05), "Col_2",
ifelse((VPSol_DESeq2$FoldChange > 1) & (VPSol_DESeq2$p_value > 0.05), "Col_3",
ifelse((VPSol_DESeq2$FoldChange < -1) & (VPSol_DESeq2$p_value > 0.05), "Col_4",
ifelse((VPSol_DESeq2$FoldChange < 1) & (VPSol_DESeq2$p_value > 0.05), "Col_5", "Col_6")))))
VPSol_edge$color <- ifelse((VPSol_edge$FoldChange > 1) & (VPSol_edge$p_value < 0.05), "Col_1",
ifelse((VPSol_edge$FoldChange < -1) & (VPSol_edge$p_value < 0.05), "Col_2",
ifelse((VPSol_edge$FoldChange > 1) & (VPSol_edge$p_value > 0.05), "Col_3",
ifelse((VPSol_edge$FoldChange < -1) & (VPSol_edge$p_value > 0.05), "Col_4",
ifelse((VPSol_edge$FoldChange < 1) & (VPSol_edge$p_value > 0.05), "Col_5", "Col_6")))))
##Create plot##
ggplot(VPSol_DESeq2, aes(x=FoldChange, y=p_value)) +
geom_point(aes(colour = color ))
ggsave("../../outputs/VPSol_DESeq2.png")
ggplot(VPSol_edge, aes(x=FoldChange, y=p_value)) +
geom_point(aes(colour = color))
